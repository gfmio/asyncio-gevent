name: Release
description: Release to PyPI

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  release:
    name: Release
    cancel-timeout-minutes: 2
    concurrency:
      group: ${{ github.workflow }}-${{ github.event }}-${{ github.ref }}-${{ github.job }}-${{ matrix.python-version }}
      cancel-in-progress: true
    environment:
      name: "pypi"
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
    timeout-minutes: 2
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    env:
      UV_PYTHON: ${{ matrix.python-version }}
      # UV_CACHE_DIR: /tmp/.cache/uv
    steps:
      # Checkout
      - uses: actions/checkout@v4
      # Install task
      - name: Install Task
        uses: arduino/setup-task@v2
      # Set up python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # Install uv
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          # cache-local-path: /tmp/.cache/uv
          cache-dependency-glob: ${{ hashFiles('**/uv.lock') }}
          ignore-nothing-to-cache: false
          cache-suffix: ${{ runner.os }}
          prune-cache: true
      # Restore uv cache
      # - name: uv cache
      #   id: cache-uv
      #   uses: actions/cache@v4
      #   with:
      #     path: /tmp/.cache/uv
      #     key: uv-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      #     restore-keys: |
      #       uv-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      #       uv-${{ runner.os }}
      # Install dependencies
      - name: Install dependencies
        run: task install
        # if: steps.cache-uv.outputs.cache-hit != 'true'
      # Build
      - name: build
        run: |
          task build
      # Publish
      - name: publish
        run: |
          uv publish --index pypi --trusted-publishing always
      # # Prune uv cache
      # - name: Prune uv cache
      #   run: uv cache prune --ci
      #   if: steps.cache-uv.outputs.cache-hit != 'true'
